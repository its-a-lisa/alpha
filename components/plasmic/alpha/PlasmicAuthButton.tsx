// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ZK3Ka3GLBNfX7wb1NZz6y
// Component: 1JFfF43ycoS1

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: nxKBKvpVYc_r/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_alpha.module.css"; // plasmic-import: ZK3Ka3GLBNfX7wb1NZz6y/projectcss
import sty from "./PlasmicAuthButton.module.css"; // plasmic-import: 1JFfF43ycoS1/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: lixJ7oSuiNeq/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: ZwlhKNz16ciL/icon

createPlasmicElementProxy;

export type PlasmicAuthButton__VariantMembers = {
  isSignOut: "isSignOut";
  isSignUp: "isSignUp";
  isSignIn: "isSignIn";
};
export type PlasmicAuthButton__VariantsArgs = {
  isSignOut?: SingleBooleanChoiceArg<"isSignOut">;
  isSignUp?: SingleBooleanChoiceArg<"isSignUp">;
  isSignIn?: SingleBooleanChoiceArg<"isSignIn">;
};
type VariantPropType = keyof PlasmicAuthButton__VariantsArgs;
export const PlasmicAuthButton__VariantProps = new Array<VariantPropType>(
  "isSignOut",
  "isSignUp",
  "isSignIn"
);

export type PlasmicAuthButton__ArgsType = {};
type ArgPropType = keyof PlasmicAuthButton__ArgsType;
export const PlasmicAuthButton__ArgProps = new Array<ArgPropType>();

export type PlasmicAuthButton__OverridesType = {
  root?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
};

export interface DefaultAuthButtonProps {
  isSignOut?: SingleBooleanChoiceArg<"isSignOut">;
  isSignUp?: SingleBooleanChoiceArg<"isSignUp">;
  isSignIn?: SingleBooleanChoiceArg<"isSignIn">;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAuthButton__RenderFunc(props: {
  variants: PlasmicAuthButton__VariantsArgs;
  args: PlasmicAuthButton__ArgsType;
  overrides: PlasmicAuthButton__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = ph.useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof p.useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "isSignOut",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSignOut
      },
      {
        path: "isSignUp",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSignUp
      },
      {
        path: "isSignIn",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.isSignIn
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = p.useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Button
        data-plasmic-name={"button"}
        data-plasmic-override={overrides.button}
        className={classNames("__wab_instance", sty.button, {
          [sty.buttonisSignIn]: hasVariant($state, "isSignIn", "isSignIn"),
          [sty.buttonisSignOut]: hasVariant($state, "isSignOut", "isSignOut"),
          [sty.buttonisSignUp]: hasVariant($state, "isSignUp", "isSignUp")
        })}
        link={
          hasVariant($state, "isSignIn", "isSignIn")
            ? `/login`
            : hasVariant($state, "isSignUp", "isSignUp")
            ? `/sign-up`
            : hasVariant($state, "isSignOut", "isSignOut")
            ? `/`
            : undefined
        }
      >
        {hasVariant($state, "isSignIn", "isSignIn")
          ? "Sign In"
          : hasVariant($state, "isSignUp", "isSignUp")
          ? "Sign Up"
          : hasVariant($state, "isSignOut", "isSignOut")
          ? "Sign Out"
          : "Auth"}
      </Button>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "button"],
  button: ["button"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  button: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAuthButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAuthButton__VariantsArgs;
    args?: PlasmicAuthButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAuthButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicAuthButton__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAuthButton__ArgProps,
          internalVariantPropNames: PlasmicAuthButton__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAuthButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAuthButton";
  } else {
    func.displayName = `PlasmicAuthButton.${nodeName}`;
  }
  return func;
}

export const PlasmicAuthButton = Object.assign(
  // Top-level PlasmicAuthButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    button: makeNodeComponent("button"),

    // Metadata about props expected for PlasmicAuthButton
    internalVariantProps: PlasmicAuthButton__VariantProps,
    internalArgProps: PlasmicAuthButton__ArgProps
  }
);

export default PlasmicAuthButton;
/* prettier-ignore-end */
